import cv2
import time
import math
import random
import numpy as np
from random import sample
import matplotlib.pyplot as plt


start_time = time.time()    

#------------------------------------ Image to Array ----------------------------------#
def Image2Array(img_party):  
    
    img_gray = np.zeros([img_size[0], img_size[1]], dtype='float32')
    
    for i in range (img_size[0]):       
        for j in range(img_size[1]): 
            img_gray[i][j] = int(img_party[:,:,0][i][j]) + int(img_party[:,:,1][i][j]) + int(img_party[:,:,2][i][j])
    
    return img_gray 


#------------------------------------ Reconstruction ----------------------------------# 
def Construction(share1, share2, share3, share4, share5, share6):

    img_result2 = np.zeros([img_size[0], img_size[1]], dtype='uint8') 
    img_result6 = np.zeros([img_size[0], img_size[1]], dtype='uint8')
    c = [6, -15, 20, -15, 6, -1]
       
    # for i in range (img_size[0]):
    #     for j in range(img_size[1]):    
    #         img_result12[i][j] = max(min((share1[i][j]*2 - share2[i][j]*1),255),0)                          
    #         img_result23[i][j] = max(min((share2[i][j]*3 - share3[i][j]*2),255),0)                         
    #         img_result13[i][j] = max(min((share1[i][j]*3/2 - share3[i][j]*1/2),255),0)                      
    #         img_result123[i][j] = max(min((share1[i][j]*3 - share2[i][j]*3 + share3[i][j]*1),255),0)        


    # return img_result12, img_result23, img_result13, img_result123
    for i in range (img_size[0]):
        for j in range(img_size[1]):    
            img_result2[i][j] = max(min((share1[i][j]*2 + share2[i][j]*(-1)),255),0)                          
            img_result6[i][j] = max(min((share1[i][j]*c[0] + share2[i][j]*c[1] + share3[i][j]*c[2] +
                                         share4[i][j]*c[3] + share5[i][j]*c[4] + share6[i][j]*c[5]),255),0)                         
  
    return img_result2, img_result6   
    
#------------------------------------  Main ----------------------------------#
if __name__ == '__main__':
    
    print("----------- Local -----------")
    party1 = cv2.imread('D:/Master_2019_2021/Muti_Party_Computation/ErrorCorrection/parties/party1.bmp')  
    party2 = cv2.imread('D:/Master_2019_2021/Muti_Party_Computation/ErrorCorrection/parties/party2.bmp')
    party3 = cv2.imread('D:/Master_2019_2021/Muti_Party_Computation/ErrorCorrection/parties/party3.bmp')
    party4 = cv2.imread('D:/Master_2019_2021/Muti_Party_Computation/ErrorCorrection/parties/party4.bmp')
    party5 = cv2.imread('D:/Master_2019_2021/Muti_Party_Computation/ErrorCorrection/parties/party5.bmp')
    party6 = cv2.imread('D:/Master_2019_2021/Muti_Party_Computation/ErrorCorrection/parties/party6.bmp')   
    image = cv2.imread('D:/Master_2019_2021/Muti_Party_Computation/python/image/Lenna_.bmp',0)  
    
    img_size = np.shape (party1)
    
    print("Image to Array") 
    img_size = np.shape (party1)
    img1 = Image2Array(party1)
    img2 = Image2Array(party2)
    img3 = Image2Array(party3)  
    img4 = Image2Array(party4) 
    img5 = Image2Array(party5) 
    img6 = Image2Array(party6) 
    
    print("Reconstruction")
    img_size = np.shape (img1)
    Image2, Image6 = Construction(img1,img2,img3,img4,img5,img6)
    # img_size = np.shape (party1)
    # Image2, Image6 = Construction(party1,party2,party3,party4,party5,party6)   
    
    plt.figure(0)
    plt.imshow(image, cmap='Greys_r') # 顯示圖片
    plt.axis('off') # 不顯示座標軸    
    plt.figure(8)
    plt.imshow(Image2, cmap='Greys_r') # 顯示圖片
    plt.axis('off') # 不顯示座標軸
    plt.figure(9)
    plt.imshow(Image6, cmap='Greys_r') # 顯示圖片
    plt.axis('off') # 不顯示座標軸

    cv2.imwrite('D:/Master_2019_2021/Muti_Party_Computation/ErrorCorrection/parties/Image1and2.bmp',  Image2) 
    cv2.imwrite('D:/Master_2019_2021/Muti_Party_Computation/ErrorCorrection/parties/Image1to6.bmp',  Image6) 
    
end_time = time.time()      
print("")      
print("Time : ",round(end_time-start_time, 2),"sec")            
            

